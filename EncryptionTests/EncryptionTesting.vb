' Copyright (C) 2014 a.k.a. Chuck, Inc.
'
' Authored by Edwin Landy - edwin@akaChuck.com.
'
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.

Imports System.Text
Imports Org.BouncyCastle.Crypto
Imports akaChuck
''' <summary>
''' Using the BouncyCastle Crypto Library to test akaChucks' implementation of  
''' the functionality found in .Net System.Security.Cryptography.
''' 
''' Bouncy Castle (http://bouncycastle.org/) uses the MIT license.
''' </summary>
''' <remarks></remarks>
<TestClass()>
Public Class EncryptionTesting

    ''' <summary>
    ''' Tests that akaChuck correctly implements PBKDF2.
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()>
    Public Sub Test_KeyGeneration()
        '------------------------------------
        '----- 1. Get key with akaChuck -----
        '------------------------------------
        Dim secret1 As New Encryption.SymmetricEncryptionSecretKeyPassword("TestPassword", 1, Encryption.PRNG.GetRandomBytes)
        ' Use infrequently used iteration count to make sure we're not using an underlying default value.
        Dim cred1 As New akaChuck.Encryption.SymmetricEncryptionCredential(secret1, 1123, Encryption.EncryptionAlgorithm.AES256)
        Dim akaChuckKey1() As Byte = cred1.Key

        '-----------------------------------------
        '----- 2. Get key with Bouncy Castle -----
        '-----------------------------------------
        Dim bcKeyDer As New Org.BouncyCastle.Crypto.Generators.Pkcs5S2ParametersGenerator()
        ' Use the same password and salt as with akaChuck.
        bcKeyDer.Init(secret1.Password, cred1.OvertParameters.Salt, cred1.OvertParameters.KeyIterations)
        Dim bcparam As Parameters.KeyParameter = bcKeyDer.GenerateDerivedParameters("aes256", 256)
        Dim bcKey1() As Byte = bcparam.GetKey()

        '-----------------------------------------
        '----- 3. See that they match ------------
        '-----------------------------------------

        CollectionAssert.AreEqual(bcKey1, akaChuckKey1)

        '--------------------------------------------------------------------
        '----- 3. Get key with akaChuck using different password ------------
        '--------------------------------------------------------------------

        Dim secret2 As New Encryption.SymmetricEncryptionSecretKeyPassword("TestPassword", 1, Encryption.PRNG.GetRandomBytes)
        Dim cred2 As New akaChuck.Encryption.SymmetricEncryptionCredential(secret2, cred1.OvertParameters, cred1.IV)
        Dim akaChuckKey2() As Byte = cred2.Key

        '-----------------------------------------
        '----- 3. See that they don't match ------
        '-----------------------------------------

        CollectionAssert.AreNotEqual(bcKey1, akaChuckKey2)

    End Sub
    <TestMethod()>
    Public Sub Test_SymmetricEncryptorDecryptor()

        Dim unencryptedString As String = "This is a test. If I am encrypted and decrypted properly, you will be able to read me."
        Dim unencryptedBytes() As Byte = Text.Encoding.UTF8.GetBytes(unencryptedString)

        '--------------------------------------------------------
        '----- 1. Get key and IV (Credential) with akaChuck -----
        '--------------------------------------------------------
        Dim secret1 As New Encryption.SymmetricEncryptionSecretKeyPassword("TestPassword", 1, Encryption.PRNG.GetRandomBytes)
        ' Use infrequently used iteration count to make sure we're not using an underlying default value.
        Dim cred1 As New akaChuck.Encryption.SymmetricEncryptionCredential(secret1, 2000, Encryption.EncryptionAlgorithm.AES256)


        '--------------------------------------------------------
        '----- 2. Get encrypted bytes with akaChuck -----
        '--------------------------------------------------------
        Dim akaEncryptedBytes() As Byte
        Using unencryptedStream As New System.IO.MemoryStream(unencryptedBytes)
            Dim encryptor As New akaChuck.Encryption.SymmetricEncryptorStream(unencryptedStream, cred1)
            akaEncryptedBytes = encryptor.EncryptToBytes()
        End Using

        '-----------------------------------------------------
        '----- 3. Get encrypted bytes with Bouncy Castle -----
        '-----------------------------------------------------
        ' Use key generated by akaChuck.
        Dim keyparam As New Parameters.KeyParameter(cred1.Key)
        ' Use IV generated by akaChuck.
        Dim params As New Parameters.ParametersWithIV(keyparam, cred1.IV)
        Dim padding As New Org.BouncyCastle.Crypto.Paddings.Pkcs7Padding
        Dim cipher As New Org.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher(New Modes.CbcBlockCipher(New Org.BouncyCastle.Crypto.Engines.AesEngine), padding)
        cipher.Reset()
        cipher.Init(True, params)

        Dim bcEncryptedBytes(cipher.GetOutputSize(unencryptedBytes.Length) - 1) As Byte
        Dim len As Integer = cipher.ProcessBytes(unencryptedBytes, 0, unencryptedBytes.Length, bcEncryptedBytes, 0)

        len += cipher.DoFinal(bcEncryptedBytes, len)

        '-----------------------------------------------------
        '----- 4. See that the ouputs are equal ---------------
        '-----------------------------------------------------

        ' If equal, we have shown with good certainty that we have in fact
        ' encrypted with AES256.
        CollectionAssert.AreEqual(bcEncryptedBytes, akaEncryptedBytes)

        '-----------------------------------------------------
        '----- 5. Decrypt with akaChuck ----------------------
        '-----------------------------------------------------
        Dim akaDecryptedBytes() As Byte
        Using encryptedStream As New System.IO.MemoryStream(bcEncryptedBytes)
            Dim decryptor As New akaChuck.Encryption.SymmetricDecryptorStream(encryptedStream, cred1)
            akaDecryptedBytes = decryptor.DecryptToBytes
        End Using

        Dim akaDecryptedString As String = Text.Encoding.UTF8.GetString(akaDecryptedBytes)

        Assert.AreEqual(unencryptedString, akaDecryptedString)

    End Sub
End Class
